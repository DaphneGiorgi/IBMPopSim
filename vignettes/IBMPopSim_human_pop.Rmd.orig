---
title: "Human population"
author: "DaphnÃ© Giorgi, Sarah Kaakai, Vincent Lemaire"
pkgdown:
  as_is: true
output:
  bookdown::pdf_document2:
    toc: yes
    toc_depth: 3
    number_sections: yes
package: IBMPopSim
vignette: >
  %\VignetteIndexEntry{Human population}
  %\VignetteEncoding{UTF-8}
  \usepackage[utf8]{inputenc}
  %\VignetteEngine{knitr::rmarkdown}
---
```{r knitr_opts, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  fig.align = "center",
  collapse = TRUE,
   dev = c('pdf', 'png'),
  fig.width = 7,
  fig.height = 5,
  dpi = 150
)
```

```{r setup, include=FALSE}
library(IBMPopSim)
library(ggfortify)
library(gridExtra)
```

This document provides a first simple example of usage of the package IBMPopSim, for simulating a human population with  birth and death events. See `vignette('IBMPopSim')` for a detailed presentation of the package.

# Example description

We consider a population in which individuals are characterized by their age and gender (male or female).

Individuals can give birth (only if female) or die. Birth and death intensities depend on the individuals' age and gender, but stay constant over time. In this toy model, birth and death intensities are fitted to England and Wales' 2014 birth and death rates (source: Office for National Statistics).


# Population creation


The initial population is a 100 000 individuals population sampled from England and Wales' 2014 age pyramid distribution (source: Office for National Statistics).

```{r}
str(EW_pop_14)
```

```{r, hp_pop_init}
plot_population(EW_pop_14$sample)
```

# Model parameters

```{r}
params <- with(EW_pop_14$rates,
    list("p_male" = 0.512, # probability to give birth to a male.
         "birth_rate" = stepfun(x=birth[,"age"], y=c(0,birth[,"value"])),
         "death_male" = stepfun(x=death_male[,"age"], y=c(0,death_male[,"value"])),
         "death_female" = stepfun(x=death_female[,"age"], y=c(0,death_female[,"value"]))
        )
      )
```

```{r, echo=FALSE, hp_intensities}
lbl = labs(x="Age", y="Intensity")
thm = theme(plot.title = element_text(hjust = 0.5))
grid.arrange(
    autoplot(params$birth, shape = NULL) + ggtitle("Birth intensity") + lbl,
    autoplot(params$death_male, shape = NULL) + ggtitle("Death male intensity") + lbl,
    autoplot(params$death_female, shape = NULL) + ggtitle("Death female intensity") + lbl
)
```

# Events creation
There are 2 possible events :

- Birth
- Death

Both event intensities are of type `individual`, which means that the intensity at which an individual gives birth or dies only depends on his age and characteristics, and not on other individuals characteristics (in other word, there are no interactions).

The birth and the death intensities are bounded step functions, which are constant over time.


**Birth event creation**
```{r}
birth_event <- mk_event_individual(
    type = "birth",
    intensity_code = "if (I.male) result = 0; else result = birth_rate(age(I, t));",
    kernel_code = "newI.male = CUnif(0, 1) < p_male;" # Newborn is male with probability p_male
)
```

**Death event creation**
```{r}
death_event <- mk_event_individual(
    type = "death",
    intensity_code = "result = (I.male) ? death_male(age(I, t)) : death_female(age(I, t));"
)
```

# Model creation and simulation


## Model creation

```{r}
model <- mk_model(
    characteristics = get_characteristics(EW_pop_14$sample),# Characteristics names ant type
    events = list(birth_event, death_event), # Model events
    parameters = params # Model parameters
)
summary(model)
```

**Computation of event intensity bounds** (needed for acceptance/rejection algorithm)

```{r}
birth_max <- max(params$birth)
death_max <- with(params, max(max(death_male), max(death_female)))
```

## Simulation of the population over 50 years

```{r}
sim_out <- popsim(model = model,
    population = EW_pop_14$sample, # Initial population
     #Vector of intensity bounds, with name corresponding to events name:
    events_bounds = c('birth' = birth_max, 'death' = death_max),
    parameters = params,
    time = 50,
    age_max = 120,
    multithreading = TRUE)
```

**Simulation logs**

```{r}
sim_out$logs
```

The ratio of accepted events is

```{r}
sim_out$logs[["effective_events"]] / sim_out$logs[["proposed_events"]]
```

**Outputs**

`sim_out$population` is a data frame composed of all individuals who lived in the population over the period $[0,50]$ (individuals in the initial population and born during the simulation period).
Each line corresponds to an individual, with his date of birth, date of death (`NA` if still alive at the end of the simulation) and gender.


The function `?age_pyramid` computes the age pyramid of  a population data frame at a given time.

```{r, hp_pyramids}
pyr_init = age_pyramid(sim_out$population, time = 0,ages = c(0:100,Inf))
pyr = age_pyramid(sim_out$population, time = 50, ages=c(0:100,Inf))
grid.arrange(plot_pyramid(pyr_init),
             plot_pyramid(pyr,value_breaks = seq(0,800,200)))
```

Female age pyramid at t=50

```{r, hp_pyramid_50}
plot_pyramid(pyr[pyr$male==FALSE,c("age","value")], age_breaks = as.integer(seq(1,101,5)))
```

`?age_pyramids` (plural) returns a data frame representing the population age pyramids at different times.

```{r}
#pyrs = age_pyramids(sim_out$population, time = 1:50)
```

```{r}
#library(gganimate)
```

```{r}
#plot_pyramid(pyrs) + transition_time(time) + labs(title = "Time: {frame_time}")
```

# Different simulations with the same model


## Change of initial population

The population evolution can be simulated starting from a different initial population, without having to recompile the model.

```{r}
pop_sample_1e6 <- popsample(EW_pop_14$age_pyramid, size = 1e6)
```

```{r, hp_pop_init_1e6}
plot_population(pop_sample_1e6)
```

```{r}
sim_out <- popsim(model = model,
    population = pop_sample_1e6, # Initial population
    events_bounds = c('birth' = birth_max, 'death' = death_max),
    parameters = params,
    time = 50,
    age_max = 120,
    multithreading = TRUE)
```

```{r}
sim_out$logs
```

## Modify an intensity

Events intensities and/or kernels can be modified without recompiling the model, simply by changing the parameters value.

In the first toy model, mortality rates are assumed to be constant after age 90, with a maximum age of 120 in the population.  This leads to a significant increase in the number of individuals of age over 100, even though mortality rates don't change over time in this model.

A more realistic assumption is to assume that mortality rates increase after age 90, by changing the model parameters `death_male` and `death_female`. The two step functions are replaced by functions of type `?piecewise_x` (see documentation), composed of a step function before age 90 and a linear function after for older ages.

```{r}
death_male_90 <- params$death_male
old_death_male <- linfun(x = c(89,120), y = c(death_male_90(89), 0.7)) #?linfun
params$death_male <- piecewise_x(c(89), list(death_male_90,old_death_male))

death_female_90 <- params$death_female
old_death_female <- linfun(x = c(89,120), y = c(death_female_90(89), 0.7))
params$death_female <- piecewise_x(c(89), list(death_female_90,old_death_female))
```

```{r, echo=FALSE, hp_log_death}
plot(0:120, log(params$death_female(0:120)),type="l",main="log female death rates",ylab = "rates")
```

Once the new model parameters have be defined, the event bounds must be updated.

```{r}
sim_out_lin <- popsim(model = model,
                  population = pop_sample_1e6, # Initial population
                  events_bounds = c('birth' = birth_max, 'death' = 0.7),
                  parameters = params,
                  time = 50,
                  age_max = 120)
```

The modification of the shape of mortality rates for ages over 90 generates a decrease of about 10% (depending on the simulation) in the individuals aged over 100 after 50 years of simulation.

```{r}
pop_size_90plus_const <- nrow(population_alive(sim_out$population,t = 50,a1=90))
pop_size_90plus_lin <- nrow(population_alive(sim_out_lin$population,t = 50,a1=90))
(pop_size_90plus_const-pop_size_90plus_lin)/pop_size_90plus_const*100
```

## Deactivate an event


An event can be deactivated by setting the event bound to 0.

```{r}
sim_out <- popsim(model = model,
       population = EW_pop_14$sample,
       events_bounds = c('birth' = 0, 'death' = death_max),
       parameters = params,
       age_max = 130,
       time = 50)
```

The age pyramid can be directly plotted from the population data frame with `?plot_population`

```{r, hp_pyramids2}
grid.arrange(
    plot_population(sim_out$population, time=0, ages= 0:105),
    plot_population(sim_out$population, time=20, ages= 0:105)
    )
```

```{r}
age_pyramid(sim_out$population, ages = seq(70,90,10), time = 30)
```

# Addition of "number of children" characteristic

The number of children by women can be recorded by adding a new characteristic (here named `children`) and changing the birth event kernel code.

```{r}
chi <- get_characteristics(EW_pop_14$sample)
chi <- c(chi, 'children' = 'int') # Addition  of characteristic "chi"

```

**Birth event with children count**

```{r}
new_birth_event <- mk_event_individual(
    type = "birth", name ="birth_child",
    intensity_code = "if (I.male) result = 0; else result = birth_rate(age(I, t));",
    kernel_code = " newI.male = CUnif(0, 1) < p_male;
                    newI.children = 0;
                    //When birth occur, I.children is increased of 1
                    I.children += 1;"
)
```

```{r eval=TRUE}
model_child <- mk_model(
    characteristics = chi,
    events = list(new_birth_event, death_event),
    parameters = params
)
summary(model_child)
```

```{r}
init_pop <- cbind(EW_pop_14$sample, "children"=0)
head(init_pop)
```

```{r}
sim_out <- popsim(model_child,
       population = init_pop,
       events_bounds = c('birth_child' = birth_max, 'death' = death_max),
       parameters = params,
       time = 100,
       age_max = 120,
       multithreading=TRUE)
```

```{r}
# Females of age over 50 alive at time 100:
pop_female_time <- population_alive(subset(sim_out$population, male == F), t= 100, a1= 50)
dim(pop_female_time)[1]# Number of females over 50
```

```{r,hp_birth_distrib, echo=FALSE}
ggplot(pop_female_time, aes(x=as.factor(children)))+
geom_bar(aes(y = after_stat(count/sum(count))))+
scale_y_continuous(labels=scales::percent) +
labs(title="Distribution of the number of children for women aged over 50 at time 100",
     x="Number of children",
     y="")
```

```{r}
mean(pop_female_time$children) #Mean number of children
```

# Addition of "cause of death" characteristics

In order to model different competing  causes of death, several death events can be created, each modeling one cause of death.

## Model with two independent causes of death

Individuals can die from two main causes of death 1 and 2, supposed to be independent. Then, the death intensity at age $a$ is

$$ \mu(a) = \mu_1(a) + \mu_2(a),$$

where $\mu_i(a)$ is the death intensity at age $a$ associated with cause $i$.

This model can be simulated with two death events associated to cause 1 and 2, and adding a new characteristic recording the cause of death.



```{r}
chi <- get_characteristics(pop_sample_1e6)
chi <- c(chi, 'CoD' = 'int')
```

```{r}
params$CoD1_prop <- 0.6
```

```{r}
death_event1 <- mk_event_individual(type = "death", name="CoD1",
                        intensity_code = "if (I.male) result = CoD1_prop*death_male(age(I,t));
                                         else result= CoD1_prop*death_female(age(I,t));",
                        kernel_code = "I.CoD =1;" # Records cause of death when event occurs
                                    )
death_event2 <- mk_event_individual(type = "death", name="CoD2",
                        intensity_code = "if (I.male) result = (1-CoD1_prop)*death_male(age(I,t));
                                          else result= (1-CoD1_prop)*death_female(age(I,t));",
                        kernel_code = "I.CoD =2;"
                                    )
```

```{r}
# Model creation
model_CoD <- mk_model(characteristics = chi,
                events = list(birth_event, death_event1, death_event2),
                parameters = params)
```

```{r}
init_pop_CoD <- cbind(pop_sample_1e6, "CoD"=NA) # Initial population
```

```{r}
ev_bounds <- c('birth' = birth_max,
               'CoD1' = params$CoD1_prop*death_max,
               'CoD2' = (1-params$CoD1_prop)*death_max)

sim_out_CoD <- popsim(model_CoD,
                  population = init_pop_CoD,
                  events_bounds = ev_bounds,
                  parameters = params,
                  time = 20,
                  age_max = 120,
                  multithreading=TRUE)
```

## Death and exposure table

The number of death for given age groups, time periods and for each cause of death can be computed with `?death_table`.
Example below: number of  males death of age between $[70,90]$ (single year of age groups) over the 5-year period $[15,20]$, for each cause.

```{r}
Dx_1 <- death_table(subset(sim_out_CoD$population, CoD==1 & male==T),ages = 70:90, period = c(15,20))
Dx_2 <- death_table(subset(sim_out_CoD$population, CoD==2 & male==T),ages = 70:90, period = c(15,20))
```

```{r}
# Central exposure to risk:
Ex <- exposure_table(subset(sim_out_CoD$population, male==T),ages = 70:90, period = c(15,20))
# Males central death rates by for Cause 1:
mx_1 <- Dx_1/Ex
# Males central death rates by for Cause 2:
mx_2 <- Dx_2/Ex
```

```{r, warning=FALSE, hp_death_rate_1,echo=FALSE}
plot(70:89,mx_1, col="red",type="b",main="Crude central death rate and true death intensity from cause 1")
lines(70:89,params$CoD1_prop*params$death_male(70:89),col = "blue")
```
