% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/events.R
\name{mk_event_interaction}
\alias{mk_event_interaction}
\title{Creating an event with intensity of type interaction}
\usage{
mk_event_interaction(
  type,
  name,
  interaction_code,
  kernel_code = "",
  interaction_type = "random"
)
}
\arguments{
\item{type}{Must be one of \code{'birth'}, \code{'death'}, \code{'entry'}, \code{'exit'}, \code{'swap'} or \code{'custom'}. See details.}

\item{name}{\emph{(Optional)} If not specified, the name given to the event is its type.}

\item{interaction_code}{String containing some C++ code describing the interaction function. See details.}

\item{kernel_code}{String containing some C++ code describing the event action. Optional for \code{'birth'}, \code{'death'} and \code{'exit'} events. See details.}

\item{interaction_type}{\emph{(Optional)} Either \code{'random'} or \code{'full'}. By default \code{'random'} which is faster than \code{'full'}.}
}
\value{
An S3 object of class \code{event} of type interaction.
}
\description{
Creates an event whose intensity depends on an individual and interactions with the population. When the event occurs, something happens to an individual \code{I} in the population. The intensity of the event can depend on time, the characteristics of I and other individuals in the population, and can be written as
\deqn{d(I,t,pop) = \sum_{J \in pop} U(I,J,t),}
where \eqn{U} is called the interaction function.
The created event must be used with \code{\link{mk_model}}.
}
\details{
The \code{type} argument is one of the following
\describe{
\item{\code{'birth'}}{By default, a new individual \code{newI} is created, with the same characteristics of the parent \code{I} and birth date equal to the current time. Optional code can be precised in \code{kernel_code}.}
\item{\code{'death'}}{By default, the individual \code{I} dies. Optional code can be precised in \code{kernel_code}.}
\item{\code{'entry'}}{A new individual \code{newI} is added to the population, and its characteristics have to be defined by the user in the entry \code{kernel_code}.}
\item{\code{'exit'}}{An individual \code{I} exits from the population. Optional code can be precised in \code{kernel_code}.}
\item{\code{'swap'}}{The user can change the characteristics of the selected individual \code{I}. This requires \code{kernel_code}.}
\item{\code{'custom'}}{None of the above types, the user defines \code{kernel_code} that can act on the selected individual \code{I} and on the population \code{pop}.}
}

The \code{interaction_code} argument is a string containing some C++ code describing the event interaction function $U$ at time \code{t}. The interaction value \strong{must be stored} in the variable \code{result}.
Some of available variables in the C++ code are: \code{t} (the current time), \code{I} (the current individual selected for the event), \code{J} (another individual if \code{interaction_type} is \code{'random'}), the name of the model parameters (some variables, or functions, see \code{\link{mk_model}}).
See \code{vignette('IBMPopSim_Cpp')} for more details.

The \code{kernel_code} argument is a string containing some C++ code which describing the action of the event. Some of available variables in the C++ code are: \code{t} (the current time), \code{pop} (the current population), \code{I} (the current individual selected for the event), \code{newI} (the new individual if \code{'birth'} or \code{'entry'} event), the name of the model parameters (some variables, or functions, see \code{\link{mk_model}}).
See \code{vignette('IBMPopSim')} for more details.
}
\examples{

death_interaction_code<- " result = max(J.size -I.size,0);"
event <- mk_event_interaction(type="death",
                             interaction_code = death_interaction_code)

}
\seealso{
\code{\link{mk_model}}, \code{\link{mk_event_poisson}}, \code{\link{mk_event_inhomogeneous_poisson}}, \code{\link{mk_event_individual}}.
}
